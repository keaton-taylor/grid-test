
// I like this mixin to quickly and easily define breakpoints
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type==string {
    @if $min==xsmall {
      @media (min-width: 0em) {
        @content;
      }
    }
    
    @else if $min==small {
      @media (min-width: 30em)  {
        @content;
      }
    }
    
    @else if $min==medium {
      @media (min-width: 40em) {
        @content;
      }
    }
    
    @else if $min==large {
      @media (min-width: 64em)  {
        @content;
      }
    }
    
    @else if $min==xlarge {
      @media (min-width: 78.125em)  {
        @content;
      }
    }
   
    @else {
      @warn "Breakpoint mixin supports: small, medium, large, xlarge";
    }
  }
  @else if $type==number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if $min !=0 and $max !=0 {
      $query: "(min-width: #{$min}) and (max-width: #{$max})";
    } // set both min and max
    @else if $min !=0 and $max==0 {
      $query: "(min-width: #{$min})";
    } // set just min
    @else if $min==0 and $max !=0 {
      $query: "(max-width: #{$max})";
    } // set just max
    @media #{$query} {
      @content;
    }
  }
}

// Start scss styles
html {
  background: #EDEFF0;
  font-family: Helvetica;
}

img {
  width: 100%;
}

.CardLayout {
  display: grid;
  grid-gap: 30px;
  justify-content: center;
  max-width: 960px;
  padding: 8em 2em;
  margin: auto;

  @include breakpoint(600px) {
    grid-template-columns: 1fr 1fr;
  }

  @include breakpoint(large) {
    grid-template-columns: repeat(6 , 1fr);
  }
}

.Card {
  background-color: white;
  border-radius: 6px;
  display: grid;
  grid-template-areas:
    "image"
    "info";
  box-shadow: 0 1px 1px 0 #C6CCD2;

  @include breakpoint(large) {
    &.CardOne {
      grid-column: 1 / span 2;
      grid-row: 1;
    }

    &.CardTwo {
      grid-column: 3 / span 2;
      grid-row: 1;
    }

    &.CardThree {
      grid-column: 5 / span 2;
      grid-row: 1;
    }

    &.CardFour {
      grid-column: 2 / span 2;
      grid-row: 2;
    }

    &.CardFive {
      grid-column: 4 / span 2;
      grid-row: 2;
    }
  }
}

.Card__image {
  display: grid;

  img {
    grid-area: image;
  }

  .Card__likes {
    display: grid;
    grid-template-columns: max-content max-content;
    align-items: center;
    grid-area: image;
    align-self: start;
    justify-self: end;
    fill: white;
    color: white;
    padding: 0.5em;
    
    span {
      padding-left: 2px;
    }
  }
}

.Card__info {
  grid-area: info;

  &-headline {
    color: #384047;
    font-weight: bold;
    letter-spacing: .43px;
    padding: 1em;
  }
  
  p {
    margin: 0;
  }

  hr {
    background-color: #edeff0;
    height: 1px;
    border: 0;
    margin: 0;
  }
}

.Card__avatar {
  font-size: 12px;
  display: grid;
  grid-template-columns: 36px 1fr;
  align-items: center;
  grid-gap: 1em;
  padding: calc(1em + 1px) 1em;
  
  &-name {
    letter-spacing: .43px;
  }

  &-date {
    color: #8d9aa5;
    letter-spacing: .43px;
  }

  p {
    margin: 0 0 2px 0;
    padding: 0;
  }
  // this is handy every once in a while.
  .CardFour & {
    img {
      visibility: hidden;
    }
  }
}

